import type { SIWXConfig } from '../utils/SIWXUtil.js';
import type { ConnectMethod, CustomWallet, DefaultAccountTypes, Features, Metadata, ProjectId, SdkVersion, SocialProvider, Tokens, WalletFeature } from '../utils/TypeUtil.js';
export interface OptionsControllerStatePublic {
    /**
     * A boolean that allows you to add or remove the "All Wallets" button on the modal
     * @default 'SHOW'
     * @see https://docs.reown.com/appkit/react/core/options#allwallets
     */
    allWallets?: 'SHOW' | 'HIDE' | 'ONLY_MOBILE';
    /**
     * The project ID for the AppKit. You can find or create your project ID in the Cloud.
     * @see https://cloud.walletconnect.com/
     */
    projectId: ProjectId;
    /**
     * Array of wallet ids to be shown in the modal's connection view with priority. These wallets will also show up first in `All Wallets` view
     * @default []
     * @see https://docs.reown.com/appkit/react/core/options#featuredwalletids
     */
    featuredWalletIds?: string[];
    /**
     * Array of wallet ids to be shown (order is respected). Unlike `featuredWalletIds`, these wallets will be the only ones shown in `All Wallets` view and as recommended wallets.
     * @default []
     * @see https://docs.reown.com/appkit/react/core/options#includewalletids
     */
    includeWalletIds?: string[];
    /**
     * Array of wallet ids to be excluded from the wallet list in the modal.
     * @default []
     * @see https://docs.reown.com/appkit/react/core/options#excludewalletids
     */
    excludeWalletIds?: string[];
    /**
     * Array of tokens to show the user's balance of. Each key represents the chain id of the token's blockchain
     * @default {}
     * @see https://docs.reown.com/appkit/react/core/options#tokens
     */
    tokens?: Tokens;
    /**
     * Add custom wallets to the modal. CustomWallets is an array of objects, where each object contains specific information of a custom wallet.
     * @default []
     * @see https://docs.reown.com/appkit/react/core/options#customwallets
     *
     */
    customWallets?: CustomWallet[];
    /**
     * You can add an url for the terms and conditions link.
     * @default undefined
     */
    termsConditionsUrl?: string;
    /**
     * You can add an url for the privacy policy link.
     * @default undefined
     */
    privacyPolicyUrl?: string;
    /**
     * Set of fields that related to your project which will be used to populate the metadata of the modal.
     * @default {}
     */
    metadata?: Metadata;
    /**
     * Enable or disable the appending the AppKit to the DOM. Created for specific use cases like WebGL.
     * @default false
     */
    disableAppend?: boolean;
    /**
     * Enable or disable the all the wallet options (injected, Coinbase, QR, etc.). This is useful if you want to use only email and socials.
     * @default true
     */
    enableWallets?: boolean;
    /**
     * Enable or disable the EIP6963 feature in your AppKit.
     * @default false
     */
    enableEIP6963?: boolean;
    /**
     * Enable or disable the Coinbase wallet in your AppKit.
     * @default true
     */
    enableCoinbase?: boolean;
    /**
     * Enable or disable the Injected wallet in your AppKit.
     * @default true
     */
    enableInjected?: boolean;
    /**
     * Enable or disable the WalletConnect QR code in your AppKit.
     * @default true
     */
    enableWalletConnect?: boolean;
    /**
     * Enable or disable the wallet guide footer in AppKit if you have email or social login configured.
     * @default true
     */
    enableWalletGuide?: boolean;
    /**
     * Enable or disable logs from email/social login.
     * @default true
     */
    enableAuthLogger?: boolean;
    /**
     * Enable or disable debug mode in your AppKit. This is useful if you want to see UI alerts when debugging.
     * @default true
     */
    debug?: boolean;
    /**
     * Features configuration object.
     * @default { swaps: true, onramp: true, email: true, socials: ['google', 'x', 'discord', 'farcaster', 'github', 'apple', 'facebook'], history: true, analytics: true, allWallets: true }
     * @see https://docs.reown.com/appkit/react/core/options#features
     */
    features?: Features;
    /**
     * @experimental - This feature is not production ready.
     * Enable Sign In With X (SIWX) feature in your AppKit.
     * @default undefined
     */
    siwx?: SIWXConfig;
    /**
     * Renders the AppKit to DOM instead of the default modal.
     * @default false
     */
    enableEmbedded?: boolean;
    /**
     * Allow users to switch to an unsupported chain.
     * @default false
     */
    allowUnsupportedChain?: boolean;
    /**
     * Default account types for each namespace.
     * @default "{ bip122: 'payment', eip155: 'smartAccount', polkadot: 'eoa', solana: 'eoa' }"
     */
    defaultAccountTypes: DefaultAccountTypes;
}
export interface OptionsControllerStateInternal {
    sdkType: 'appkit';
    sdkVersion: SdkVersion;
    isSiweEnabled?: boolean;
    isUniversalProvider?: boolean;
    hasMultipleAddresses?: boolean;
    useInjectedUniversalProvider?: boolean;
}
type StateKey = keyof OptionsControllerStatePublic | keyof OptionsControllerStateInternal;
type OptionsControllerState = OptionsControllerStatePublic & OptionsControllerStateInternal;
export declare const OptionsController: {
    state: OptionsControllerStatePublic & OptionsControllerStateInternal;
    subscribeKey<K extends StateKey>(key: K, callback: (value: OptionsControllerState[K]) => void): () => void;
    setOptions(options: OptionsControllerState): void;
    setFeatures(features: OptionsControllerState['features'] | undefined): void;
    setProjectId(projectId: OptionsControllerState['projectId']): void;
    setAllWallets(allWallets: OptionsControllerState['allWallets']): void;
    setIncludeWalletIds(includeWalletIds: OptionsControllerState['includeWalletIds']): void;
    setExcludeWalletIds(excludeWalletIds: OptionsControllerState['excludeWalletIds']): void;
    setFeaturedWalletIds(featuredWalletIds: OptionsControllerState['featuredWalletIds']): void;
    setTokens(tokens: OptionsControllerState['tokens']): void;
    setTermsConditionsUrl(termsConditionsUrl: OptionsControllerState['termsConditionsUrl']): void;
    setPrivacyPolicyUrl(privacyPolicyUrl: OptionsControllerState['privacyPolicyUrl']): void;
    setCustomWallets(customWallets: OptionsControllerState['customWallets']): void;
    setIsSiweEnabled(isSiweEnabled: OptionsControllerState['isSiweEnabled']): void;
    setIsUniversalProvider(isUniversalProvider: OptionsControllerState['isUniversalProvider']): void;
    setSdkVersion(sdkVersion: OptionsControllerState['sdkVersion']): void;
    setMetadata(metadata: OptionsControllerState['metadata']): void;
    setDisableAppend(disableAppend: OptionsControllerState['disableAppend']): void;
    setEIP6963Enabled(enableEIP6963: OptionsControllerState['enableEIP6963']): void;
    setDebug(debug: OptionsControllerState['debug']): void;
    setEnableWalletConnect(enableWalletConnect: OptionsControllerState['enableWalletConnect']): void;
    setEnableWalletGuide(enableWalletGuide: OptionsControllerState['enableWalletGuide']): void;
    setEnableAuthLogger(enableAuthLogger: OptionsControllerState['enableAuthLogger']): void;
    setEnableWallets(enableWallets: OptionsControllerState['enableWallets']): void;
    setHasMultipleAddresses(hasMultipleAddresses: OptionsControllerState['hasMultipleAddresses']): void;
    setSIWX(siwx: OptionsControllerState['siwx']): void;
    setConnectMethodsOrder(connectMethodsOrder: ConnectMethod[]): void;
    setWalletFeaturesOrder(walletFeaturesOrder: WalletFeature[]): void;
    setSocialsOrder(socialsOrder: SocialProvider[]): void;
    setCollapseWallets(collapseWallets: boolean): void;
    setEnableEmbedded(enableEmbedded: OptionsControllerState['enableEmbedded']): void;
    setAllowUnsupportedChain(allowUnsupportedChain: OptionsControllerState['allowUnsupportedChain']): void;
    setUsingInjectedUniversalProvider(useInjectedUniversalProvider: OptionsControllerState['useInjectedUniversalProvider']): void;
    setDefaultAccountTypes(defaultAccountType?: Partial<OptionsControllerState['defaultAccountTypes']>): void;
    getSnapshot(): {
        readonly allWallets?: "SHOW" | "HIDE" | "ONLY_MOBILE" | undefined;
        readonly projectId: ProjectId;
        readonly featuredWalletIds?: readonly string[] | undefined;
        readonly includeWalletIds?: readonly string[] | undefined;
        readonly excludeWalletIds?: readonly string[] | undefined;
        readonly tokens?: {
            readonly [x: `eip155:${string}`]: {
                readonly address: string;
                readonly image?: string | undefined;
            };
            readonly [x: `eip155:${number}`]: {
                readonly address: string;
                readonly image?: string | undefined;
            };
            readonly [x: `solana:${string}`]: {
                readonly address: string;
                readonly image?: string | undefined;
            };
            readonly [x: `solana:${number}`]: {
                readonly address: string;
                readonly image?: string | undefined;
            };
            readonly [x: `polkadot:${string}`]: {
                readonly address: string;
                readonly image?: string | undefined;
            };
            readonly [x: `polkadot:${number}`]: {
                readonly address: string;
                readonly image?: string | undefined;
            };
            readonly [x: `bip122:${string}`]: {
                readonly address: string;
                readonly image?: string | undefined;
            };
            readonly [x: `bip122:${number}`]: {
                readonly address: string;
                readonly image?: string | undefined;
            };
        } | undefined;
        readonly customWallets?: readonly {
            readonly name: string;
            readonly id: string;
            readonly homepage?: string | undefined;
            readonly image_url?: string | undefined;
            readonly mobile_link?: string | null | undefined;
            readonly desktop_link?: string | null | undefined;
            readonly webapp_link?: string | null | undefined;
            readonly app_store?: string | null | undefined;
            readonly play_store?: string | null | undefined;
        }[] | undefined;
        readonly termsConditionsUrl?: string | undefined;
        readonly privacyPolicyUrl?: string | undefined;
        readonly metadata?: {
            readonly name: string;
            readonly description: string;
            readonly url: string;
            readonly icons: readonly string[];
        } | undefined;
        readonly disableAppend?: boolean | undefined;
        readonly enableWallets?: boolean | undefined;
        readonly enableEIP6963?: boolean | undefined;
        readonly enableCoinbase?: boolean | undefined;
        readonly enableInjected?: boolean | undefined;
        readonly enableWalletConnect?: boolean | undefined;
        readonly enableWalletGuide?: boolean | undefined;
        readonly enableAuthLogger?: boolean | undefined;
        readonly debug?: boolean | undefined;
        readonly features?: {
            readonly swaps?: boolean | undefined;
            readonly onramp?: boolean | undefined;
            readonly receive?: boolean | undefined;
            readonly send?: boolean | undefined;
            readonly email?: boolean | undefined;
            readonly emailShowWallets?: boolean | undefined;
            readonly socials?: false | readonly SocialProvider[] | undefined;
            readonly history?: boolean | undefined;
            readonly analytics?: boolean | undefined;
            readonly allWallets?: boolean | undefined;
            readonly smartSessions?: boolean | undefined;
            readonly legalCheckbox?: boolean | undefined;
            readonly connectMethodsOrder?: readonly ConnectMethod[] | undefined;
            readonly walletFeaturesOrder?: readonly WalletFeature[] | undefined;
            readonly collapseWallets?: boolean | undefined;
        } | undefined;
        readonly siwx?: {
            readonly createMessage: (input: import("../utils/SIWXUtil.js").SIWXMessage.Input) => Promise<import("../utils/SIWXUtil.js").SIWXMessage>;
            readonly addSession: (session: import("../utils/SIWXUtil.js").SIWXSession) => Promise<void>;
            readonly revokeSession: (chainId: `eip155:${string}` | `eip155:${number}` | `solana:${string}` | `solana:${number}` | `polkadot:${string}` | `polkadot:${number}` | `bip122:${string}` | `bip122:${number}`, address: string) => Promise<void>;
            readonly setSessions: (sessions: import("../utils/SIWXUtil.js").SIWXSession[]) => Promise<void>;
            readonly getSessions: (chainId: `eip155:${string}` | `eip155:${number}` | `solana:${string}` | `solana:${number}` | `polkadot:${string}` | `polkadot:${number}` | `bip122:${string}` | `bip122:${number}`, address: string) => Promise<import("../utils/SIWXUtil.js").SIWXSession[]>;
            readonly getRequired?: (() => boolean) | undefined;
        } | undefined;
        readonly enableEmbedded?: boolean | undefined;
        readonly allowUnsupportedChain?: boolean | undefined;
        readonly defaultAccountTypes: {
            readonly eip155: "smartAccount" | "eoa";
            readonly solana: "eoa";
            readonly bip122: "payment" | "ordinal" | "stx";
            readonly polkadot: "eoa";
        };
        readonly sdkType: 'appkit';
        readonly sdkVersion: SdkVersion;
        readonly isSiweEnabled?: boolean | undefined;
        readonly isUniversalProvider?: boolean | undefined;
        readonly hasMultipleAddresses?: boolean | undefined;
        readonly useInjectedUniversalProvider?: boolean | undefined;
    };
};
export {};
