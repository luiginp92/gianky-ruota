import { type ChainNamespace } from '@reown/appkit-common';
import type { AuthConnector, Connector, WcWallet } from '../utils/TypeUtil.js';
export interface ConnectorWithProviders extends Connector {
    connectors?: Connector[];
}
export interface ConnectorControllerState {
    allConnectors: Connector[];
    connectors: ConnectorWithProviders[];
    activeConnector: Connector | undefined;
    filterByNamespace: ChainNamespace | undefined;
}
export declare const ConnectorController: {
    state: ConnectorControllerState;
    subscribe(callback: (value: ConnectorControllerState) => void): () => void;
    subscribeKey<K extends keyof ConnectorControllerState>(key: K, callback: (value: ConnectorControllerState[K]) => void): () => void;
    setActiveConnector(connector: ConnectorControllerState['activeConnector']): void;
    setConnectors(connectors: ConnectorControllerState['connectors']): void;
    removeAdapter(namespace: ChainNamespace): void;
    mergeMultiChainConnectors(connectors: Connector[]): ConnectorWithProviders[];
    generateConnectorMapByName(connectors: Connector[]): Map<string, Connector[]>;
    getConnectorName(name: string | undefined): string | undefined;
    getUniqueConnectorsByName(connectors: Connector[]): Connector[];
    addConnector(connector: Connector | AuthConnector): void;
    getAuthConnector(): AuthConnector | undefined;
    getAnnouncedConnectorRdns(): (string | undefined)[];
    getConnector(id: string, rdns?: string | null): ConnectorWithProviders | undefined;
    syncIfAuthConnector(connector: Connector | AuthConnector): void;
    /**
     * Returns the connectors filtered by namespace.
     * @param namespace - The namespace to filter the connectors by.
     * @returns ConnectorWithProviders[].
     */
    getConnectorsByNamespace(namespace: ChainNamespace): ConnectorWithProviders[];
    selectWalletConnector(wallet: WcWallet): void;
    /**
     * Returns the connectors. If a namespace is provided, the connectors are filtered by namespace.
     * @param namespace - The namespace to filter the connectors by. If not provided, all connectors are returned.
     * @returns ConnectorWithProviders[].
     */
    getConnectors(namespace?: ChainNamespace): ConnectorWithProviders[];
    /**
     * Sets the filter by namespace and updates the connectors.
     * @param namespace - The namespace to filter the connectors by.
     */
    setFilterByNamespace(namespace: ChainNamespace): void;
    clearNamespaceFilter(): void;
};
